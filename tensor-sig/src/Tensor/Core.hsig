{-# LANGUAGE AllowAmbiguousTypes    #-}
{-# LANGUAGE DataKinds              #-}
{-# LANGUAGE FlexibleContexts       #-}
{-# LANGUAGE FlexibleInstances      #-}
{-# LANGUAGE ScopedTypeVariables    #-}
{-# LANGUAGE TypeFamilies           #-}
{-# LANGUAGE TypeFamilyDependencies #-}
{-# LANGUAGE TypeInType             #-}
{-# LANGUAGE TypeOperators          #-}

signature Tensor.Core (
  -- * Types
    Tensor, ScalarR, ScalarC, Scalar, Dom(..)
  -- * General manipulation
  , genA, gen, konst, sumElements
  , mapT, zipT
  , index, select
  , reshape
  , load, store
  -- * Basic Linear Algebra
  , tr
  , scale, addScale
  , dot
  , norm2
  , asum
  , iamax
  , matVecScale
  , outerScale
  , xTxScale
  , matMatScale
  , mTmScale
  -- -- * BLAS
  -- , transp
  -- -- ** Level 1
  -- , scal, axpy, dot, norm2, asum, iamax
  -- -- ** Level 2
  -- , gemv, ger, syr
  -- -- ** Level 3
  -- , gemm, syrk
  ) where

import           Control.DeepSeq
import           Data.Finite
import           Data.Kind
import           Data.Singletons
import           Data.Singletons.Prelude.List
import           Data.Type.Product hiding     (index, select)
import           GHC.TypeNats
import           Type.Family.List
import qualified Data.Vector.Generic          as VG
import qualified Data.Vector.Generic.Sized    as SVG

data Dom = R | C

data Tensor :: Dom -> [Nat] -> Type

data ScalarR
data ScalarC

type family Scalar (d :: Dom) = (s :: Type) | s -> d where
    Scalar 'R = ScalarR
    Scalar 'C = ScalarC

-- instance SingI ns => Show (Tensor d ns)
-- instance SingI ns => Num (Tensor d ns)
-- instance NFData (Tensor d ns)

-- instance Show (Scalar 'R)
-- instance Show (Scalar 'C)
instance Num ScalarR
instance Num ScalarC
-- instance NFData (Scalar d)

instance SingKind Dom
instance SingI 'R
instance SingI 'C


genA
    :: forall d ns f. (SingI d, Applicative f)
    => Sing ns
    -> (Prod Finite ns -> f (Scalar d))
    -> f (Tensor d ns)

gen :: SingI d
    => Sing ns
    -> (Prod Finite ns -> Scalar d)
    -> Tensor d ns

konst
    :: SingI d
    => Sing ns
    -> Scalar d
    -> Tensor d ns

sumElements
    :: (SingI d, SingI ns)
    => Tensor d ns
    -> Scalar d

mapT
    :: (SingI d, SingI e, SingI ns)
    => (Scalar d -> Scalar e)
    -> Tensor d ns
    -> Tensor e ns

zipT
    :: (SingI d, SingI e, SingI f, SingI ns)
    => (Scalar d -> Scalar e -> Scalar f)
    -> Tensor d ns
    -> Tensor e ns
    -> Tensor f ns

index
    :: (SingI d, SingI ns)
    => Prod Finite ns
    -> Tensor d ns
    -> Scalar d

select
    :: (SingI d, SingI ns, SingI ms)
    => Prod Finite ns
    -> Tensor d (ns ++ ms)
    -> Tensor d ms

reshape
    :: (SingI d, SingI ns, Product ns ~ Product ms)
    => Sing ms
    -> Tensor d ns
    -> Tensor d ms

load
    :: forall v d ns. (VG.Vector v (Scalar d), SingI d)
    => Sing ns
    -> SVG.Vector v (Product ns) (Scalar d)
    -> Tensor d ns

store
    :: forall v d ns. (SingI d, SingI ns, VG.Vector v (Scalar d))
    => Tensor d ns
    -> SVG.Vector v (Product ns) (Scalar d)

tr  :: (SingI d, KnownNat m, KnownNat n)
    => Tensor d '[m, n]
    -> Tensor d '[n, m]

-- diag
--     :: (SingI d, KnownNat m)
--     => Tensor d '[m]
--     -> Tensor d '[m,m]

-- getDiag
--     :: (SingI d, KnownNat m)
--     => Tensor d '[m,m]
--     -> Tensor d '[m]

scale
    :: (SingI d, KnownNat n)
    => Scalar d         -- ^ α
    -> Tensor d '[n]    -- ^ x
    -> Tensor d '[n]    -- ^ α x

addScale
    :: (SingI d, KnownNat n)
    => Scalar d     -- ^ α
    -> Tensor d '[n]    -- ^ x
    -> Tensor d '[n]    -- ^ y
    -> Tensor d '[n]    -- ^ α x + y

dot :: (SingI d, KnownNat n)
    => Tensor d '[n]    -- ^ x
    -> Tensor d '[n]    -- ^ y
    -> Scalar d     -- ^ x' y

norm2
    :: (SingI d, KnownNat n)
    => Tensor d '[n]    -- ^ x
    -> Scalar 'R     -- ^ ||x||

asum
    :: (SingI d, KnownNat n)
    => Tensor d '[n]    -- ^ x
    -> Scalar 'R     -- ^ sum_i |x_i|

iamax
    :: (SingI d, KnownNat n)
    => Tensor d '[n + 1]    -- ^ x
    -> Finite (n + 1)     -- ^ argmax_i |x_i|

matVecScale
    :: (SingI d, KnownNat m, KnownNat n)
    => Scalar d             -- ^ α
    -> Tensor d '[m, n]     -- ^ A
    -> Tensor d '[n]        -- ^ x
    -> Tensor d '[m]        -- ^ α A x

outerScale
    :: (SingI d, KnownNat m, KnownNat n)
    => Scalar d             -- ^ α
    -> Tensor d '[m]        -- ^ x
    -> Tensor d '[n]        -- ^ y
    -> Tensor d '[m, n]     -- ^ α x y'

xTxScale :: (SingI d, KnownNat n)
    => Scalar d           -- ^ α
    -> Tensor d '[n]             -- ^ x
    -> Tensor d '[n, n]          -- ^ x x'

matMatScale
    :: (SingI d, KnownNat m, KnownNat o, KnownNat n)
    => Scalar d     -- ^ α
    -> Tensor d '[m, o]  -- ^ A
    -> Tensor d '[o, n]  -- ^ B
    -> Tensor d '[m, n]  -- ^ α A B

mTmScale
    :: (SingI d, KnownNat m, KnownNat n)
    => Scalar d     -- ^ α
    -> Tensor d '[m, n]  -- ^ A
    -> Tensor d '[m, m]  -- ^ α A A' + β C

-- eye :: (SingI d, SingI ns)
--     => Tensor d ns

-- scal
--     :: (SingI d, KnownNat n)
--     => Scalar d     -- ^ α
--     -> Tensor d '[n]    -- ^ x
--     -> Tensor d '[n]    -- ^ α x

-- axpy
--     :: (SingI d, KnownNat n)
--     => Scalar d     -- ^ α
--     -> Tensor d '[n]    -- ^ x
--     -> Tensor d '[n]    -- ^ y
--     -> Tensor d '[n]    -- ^ α x + y

-- dot :: (SingI d, KnownNat n)
--     => Tensor d '[n]    -- ^ x
--     -> Tensor d '[n]    -- ^ y
--     -> Scalar d     -- ^ x' y

-- norm2
--     :: (SingI d, KnownNat n)
--     => Tensor d '[n]    -- ^ x
--     -> Scalar 'R     -- ^ ||x||

-- asum
--     :: (SingI d, KnownNat n)
--     => Tensor d '[n]    -- ^ x
--     -> Scalar 'R     -- ^ sum_i |x_i|

-- iamax
--     :: (SingI d, KnownNat n)
--     => Tensor d '[n + 1]    -- ^ x
--     -> Finite (n + 1)     -- ^ argmax_i |x_i|

-- gemv
--     :: (SingI d, KnownNat m, KnownNat n)
--     => Scalar d     -- ^ α
--     -> Tensor d '[m, n]  -- ^ A
--     -> Tensor d '[n]    -- ^ x
--     -> Maybe (Scalar d, Tensor d '[m])    -- ^ β, y
--     -> Tensor d '[m]    -- ^ α A x + β y

-- ger :: (SingI d, KnownNat m, KnownNat n)
--     => Scalar d     -- ^ α
--     -> Tensor d '[m]    -- ^ x
--     -> Tensor d '[n]    -- ^ y
--     -> Maybe (Tensor d '[m, n])  -- ^ A
--     -> Tensor d '[m, n]  -- ^ α x y' + A

-- syr :: (SingI d, KnownNat n)
--     => Scalar d           -- ^ α
--     -> Tensor d '[n]             -- ^ x
--     -> Maybe (Tensor d '[n, n])  -- ^ A
--     -> Tensor d '[n, n]          -- ^ x x' + A

-- gemm
--     :: (SingI d, KnownNat m, KnownNat o, KnownNat n)
--     => Scalar d     -- ^ α
--     -> Tensor d '[m, o]  -- ^ A
--     -> Tensor d '[o, n]  -- ^ B
--     -> Maybe (Scalar d, Tensor d '[m, n])  -- ^ β, C
--     -> Tensor d '[m, n]  -- ^ α A B + β C

-- syrk
--     :: (SingI d, KnownNat m, KnownNat n)
--     => Scalar d     -- ^ α
--     -> Tensor d '[m, n]  -- ^ A
--     -> Maybe (Scalar d, Tensor d '[m, m])  -- ^ β, C
--     -> Tensor d '[m, m]  -- ^ α A A' + β C
